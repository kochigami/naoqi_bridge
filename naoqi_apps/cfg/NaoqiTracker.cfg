#!/usr/bin/env python
#
# Generate dynamic reconfigure options for naoqi_tracker.py
#
# Copyright (c) 2016, Aldebaran
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    # Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    # Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    # Neither the name of the Imperial College London nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import sys
import dynamic_reconfigure.parameter_generator_catkin as pg
params = {
    "mode" : {
        "type": pg.str_t,
        "description": "tracking mode",
        "default" : "Head"
    },
    "targetName" : {
        "type": pg.str_t,
        "description": "tracking target name",
        "default" : "Face"
    },
    "effector" : {
        "type": pg.str_t,
        "description": "tracking effect",
        "default" : "None"
    },
    "width" : {
        "type": pg.double_t,
        "description" : "tracking width",
        "default" : 0.1,
        "min" : 0.01,
        "max" : 0.6
    },
    "distanceX" : {
        "type": pg.double_t,
        "description" : "tracking distance x",
        "default" : 0.3,
        "min" : 0.0,
        "max" : 0.6
    },
    "thresholdX" : {
        "type": pg.double_t,
        "description" : "tracking threshold x",
        "default" : 0.1,
        "min" : 0.01,
        "max" : 1.0
    },
    "distanceY" : {
        "type": pg.double_t,
        "description" : "tracking distance y",
        "default" : 0.0,
        "min" : -5.0,
        "max" : 5.0
    },
    "thresholdY" : {
        "type": pg.double_t,
        "description" : "tracking threshold y",
        "default" : 0.1,
        "min" : 0.01,
        "max" : 1.0
    },
    "distanceWz" : {
        "type": pg.double_t,
        "description" : "tracking angle Wz",
        "default" : 0.0,
        "min" : -3.14,
        "max" : 3.14
    },
    "thresholdWz" : {
        "type": pg.double_t,
        "description" : "tracking threshold Wz",
        "default" : 0.3,
        "min" : 0.0,
        "max" : 3.14
    },
}

gen = pg.ParameterGenerator()

for name, options in params.iteritems():
    gen.add(
        name,
        options.get("type"),
        0,
        options.get("description"),
        options.get("default"),
        options.get("min"),
        options.get("max"),
    )

sys.exit( gen.generate("naoqi_apps", "NaoqiTracker", "NaoqiTracker") )
